#pragma kernel ComputeFogTexture
#pragma kernel ClearFogTexture

RWTexture3D<half4> volumeFogTexture;
float fogMultiplier;
float4 fogColor;
float3 cameraPos;
#include "common.cginc"


float3 IDToUv(uint3 id, float zcenter) {
	return saturate(float3((id.x + 0.5f) / resolution.x, (id.y + 0.5f) / resolution.y, (id.z + zcenter) / resolution.z));
}

float distance(float3 v1, float3 v2)
{
	float floatX = (v2.x - v1.x)*(v2.x - v1.x);
	float floatY = (v2.y - v1.y)*(v2.y - v1.y);
	float floatZ = (v2.z - v1.z)*(v2.z - v1.z);

	return sqrt(floatX + floatY + floatZ);
}

[numthreads(8, 8, 1)]
inline void ComputeFogTexture(uint3 id : SV_DispatchThreadID)
{
	uint3 writeId = uint3(id.xy, 0);

	float4 fogTextureValue = float4(fogColor.rgb,1.0);
	for (writeId.z = 0; writeId.z < resolution.z; ++writeId.z) 
	{
		float3 uv = IDToUv(writeId, 0);
		float3 device = ConvertUvToView(uv);
		float3 worldPos = ConvertViewToWorld(device);
		float dist = distance(worldPos, cameraPos);
		float z = (writeId.z*1.0) / (resolution.z*1.0);
		float alpha = pow(z*dist, fogMultiplier);
		
		//fogTextureValue += float4(0.0,0.0,0.0, alpha);
		fogTextureValue += float4(alpha,alpha,alpha, 0.0);
		volumeFogTexture[writeId] = fogTextureValue;
	}
}

[numthreads(4, 4, 4)]
inline void ClearFogTexture(uint3 id : SV_DispatchThreadID) {
	volumeFogTexture[id] = float4(0, 0, 0, 1);
}
